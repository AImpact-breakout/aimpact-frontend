{
  "vite-react-app": {
    "files": {
      "/home/project/README.md": {
        "type": "file",
        "content": "# Solana Tic-Tac-Toe Game\n\nA decentralized tic-tac-toe game built with React, TypeScript, and Solana blockchain. Game state is stored on-chain using the provided Solana program with smart optimization to minimize transaction costs.\n\n## Features\n\n- üéÆ Classic tic-tac-toe gameplay\n- üîó On-chain state storage using Solana\n- üëõ Phantom wallet integration\n- üé® Beautiful, modern UI with Tailwind CSS\n- ‚ö° Real-time game state synchronization\n- üîÑ Automatic game state recovery from blockchain\n- üÜî **Unique game IDs** - Each game gets a random ID stored in URL params\n- üì± **Game sharing** - Share URLs to continue games later\n- üí∞ **Optimized transactions** - Smart initialization reduces wallet prompts\n\n## How It Works\n\n### Smart Transaction Optimization\n\nThe game uses an intelligent approach to minimize blockchain transactions:\n\n1. **Game ID**: Each game gets a unique random ID (u64) stored in URL parameters\n2. **Position Initialization**: Each board cell is initialized only once per game\n3. **Move Updates**: After initialization, moves only require a single `set` transaction\n4. **Game Recovery**: Games can be resumed by visiting the same URL\n\n### Transaction Flow\n\n- **First move on any cell**: `Initialize` + `Set` = **1 wallet signature**\n- **Subsequent moves**: `Set` only = **1 wallet signature** \n- **Loading game**: `Get` operations = **0 wallet signatures**\n\nThis means you'll only see **ONE wallet prompt per move**, not two!\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- Phantom wallet browser extension\n- Some SOL tokens for transaction fees (devnet SOL for testing)\n\n## Installation\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Start the development server:\n```bash\nnpm run dev\n```\n\n3. Open your browser and navigate to the provided local URL (usually `http://localhost:5173`)\n\n## How to Play\n\n1. **Connect Wallet**: Click the \"Select Wallet\" button and connect your Phantom wallet\n2. **Game Creation**: A unique game ID is automatically generated and added to the URL\n3. **Make Moves**: Click on any empty cell - first move on each cell initializes it\n4. **Share Game**: Copy the URL to share with others or resume later\n5. **New Game**: Click \"New Game\" to generate a new game ID and start fresh\n\n## Technical Details\n\n### Blockchain Integration\n\nThe game uses a Solana program with the following features:\n\n- **Program ID**: `6ytMmvJR2YYsuPR7FSQUQnb7UGi1rf36BrXzZUNvKsnj`\n- **Game Domain**: Each game uses its unique ID as the domain parameter\n- **Storage Keys**: Positions 0-8 represent the tic-tac-toe board for each game\n- **Player Values**: \n  - `0` = Empty cell\n  - `1` = Player X\n  - `2` = Player O\n\n### Program Instructions Used\n\n1. **initialize**: Creates a new storage account for a board position (once per position per game)\n2. **set**: Updates the value at a specific position (every move)\n3. **get**: Retrieves the current value at a position (game loading)\n\n### URL Structure\n\nGames can be shared and resumed using URLs like:\n```\nhttp://localhost:5173/?gameId=123456789012345\n```\n\n### Architecture\n\n- **React + TypeScript**: Modern frontend framework with type safety\n- **Anchor Framework**: Solana program interaction\n- **Wallet Adapter**: Seamless wallet integration with optimized prompts\n- **Tailwind CSS**: Utility-first styling\n- **Custom Hooks**: Encapsulated game logic with smart transaction management\n\n## Development\n\n### File Structure\n\n```\nsrc/\n‚îú‚îÄ‚îÄ components/\n‚îÇ   ‚îú‚îÄ‚îÄ SolanaProvider.tsx    # Wallet and connection setup\n‚îÇ   ‚îî‚îÄ‚îÄ TicTacToe.tsx         # Main game component with game ID display\n‚îú‚îÄ‚îÄ hooks/\n‚îÇ   ‚îî‚îÄ‚îÄ useTicTacToe.ts       # Optimized game state management\n‚îú‚îÄ‚îÄ solana/\n‚îÇ   ‚îî‚îÄ‚îÄ idl.json              # Solana program interface\n‚îú‚îÄ‚îÄ utils/\n‚îÇ   ‚îî‚îÄ‚îÄ utils.ts              # Utility functions\n‚îî‚îÄ‚îÄ App.tsx                   # Main app component\n```\n\n### Key Optimizations\n\n1. **Position Check**: Before initializing, check if position already exists\n2. **Conditional Initialization**: Only initialize positions that don't exist\n3. **Game ID Management**: Automatic generation and URL synchronization\n4. **State Recovery**: Load existing game state on page load\n\n### Network Configuration\n\nCurrently configured for Solana Devnet. To switch networks, modify the `network` variable in `SolanaProvider.tsx`:\n\n```typescript\nconst network = WalletAdapterNetwork.Devnet; // or Mainnet\n```\n\n## Build for Production\n\n```bash\nnpm run build\n```\n\nThe built files will be in the `dist/` directory.\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Wallet not connecting**: Ensure Phantom wallet extension is installed and unlocked\n2. **Transaction failures**: Make sure you have sufficient SOL for transaction fees\n3. **Game not loading**: Check if the gameId parameter is present in URL\n4. **Slow loading**: Blockchain transactions may take a few seconds to confirm\n\n### Getting Devnet SOL\n\nIf testing on devnet, you can get free SOL from:\n- Solana Faucet: `https://faucet.solana.com/`\n- Command line: `solana airdrop 1 <your-wallet-address> --url devnet`\n\n## Game Examples\n\n- **New Game**: Visit the base URL to create a new game\n- **Resume Game**: Use a URL with `?gameId=123456789012345` to resume\n- **Share Game**: Copy the current URL and share with friends\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests if applicable\n5. Submit a pull request\n\n## License\n\nMIT License - see LICENSE file for details.\n\n## Support\n\nFor issues or questions, please open an issue in the repository or contact the development team.\n\n---\n\nBuilt with ‚ù§Ô∏è using Solana, React, and TypeScript. "
      },
      "/home/project/index.html": {
        "type": "file",
        "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + React + TS</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n"
      },
      "/home/project/package.json": {
        "type": "file",
        "content": "{\n  \"name\": \"vite-template\",\n  \"private\": true,\n  \"version\": \"0.0.1\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc -b && vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@coral-xyz/anchor\": \"^0.31.1\",\n    \"@solana/wallet-adapter-base\": \"^0.9.26\",\n    \"@solana/wallet-adapter-phantom\": \"^0.9.27\",\n    \"@solana/wallet-adapter-react\": \"^0.15.38\",\n    \"@solana/wallet-adapter-react-ui\": \"^0.9.38\",\n    \"@solana/web3.js\": \"^1.98.2\",\n    \"@tailwindcss/vite\": \"^4.1.7\",\n    \"buffer\": \"^6.0.3\",\n    \"clsx\": \"^2.1.1\",\n    \"lucide-react\": \"^0.511.0\",\n    \"react\": \"^19.1.0\",\n    \"react-dom\": \"^19.1.0\",\n    \"recharts\": \"^2.15.3\",\n    \"tailwind-merge\": \"^3.3.0\",\n    \"tailwindcss\": \"^4.1.7\",\n    \"tw-animate-css\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^22.15.21\",\n    \"@types/react\": \"^19.1.2\",\n    \"@types/react-dom\": \"^19.1.2\",\n    \"@vitejs/plugin-react\": \"^4.4.1\",\n    \"autoprefixer\": \"^10.4.21\",\n    \"globals\": \"^16.0.0\",\n    \"postcss\": \"^8.5.3\",\n    \"typescript\": \"~5.8.3\",\n    \"vite\": \"^6.3.5\"\n  }\n}\n"
      },
      "/home/project/src": {
        "type": "folder"
      },
      "/home/project/src/App.tsx": {
        "type": "file",
        "content": "import { TicTacToe } from './components/TicTacToe';\n\nfunction App() {\n  return <TicTacToe />;\n}\n\nexport default App;\n"
      },
      "/home/project/src/components": {
        "type": "folder"
      },
      "/home/project/src/components/SolanaProvider.tsx": {
        "type": "file",
        "content": "import React, { useMemo } from 'react';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport '@solana/wallet-adapter-react-ui/styles.css';\nimport { PhantomWalletAdapter } from '@solana/wallet-adapter-phantom';\n\nexport interface SolanaProviderProps {\n  children: React.ReactNode;\n}\n\nexport function SolanaProvider({ children }: SolanaProviderProps) {\n  const network = WalletAdapterNetwork.Devnet; // Using devnet for development\n  \n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n  const wallets = useMemo(() => [new PhantomWalletAdapter()], []);\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>{children}</WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n} "
      },
      "/home/project/src/components/TicTacToe.tsx": {
        "type": "file",
        "content": "import React from 'react';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { useTicTacToe, type Player } from '../hooks/useTicTacToe';\nimport { cn } from '../utils/utils';\n\nexport function TicTacToe() {\n  const { connected } = useWallet();\n  const {\n    board,\n    currentPlayer,\n    gameStatus,\n    isLoading,\n    makeMove,\n    resetGame,\n    winner,\n    isConnected,\n    gameId\n  } = useTicTacToe();\n\n  const getPlayerSymbol = (player: Player) => {\n    if (player === 1) return 'X';\n    if (player === 2) return 'O';\n    return '';\n  };\n\n  const getPlayerName = (player: Player) => {\n    if (player === 1) return 'Player X';\n    if (player === 2) return 'Player O';\n    return '';\n  };\n\n  const getCellStyle = (player: Player, index: number) => {\n    let baseStyle = \"w-24 h-24 border-2 border-gray-300 flex items-center justify-center text-4xl font-bold cursor-pointer transition-all duration-200 hover:bg-gray-50\";\n    \n    if (player === 1) {\n      baseStyle += \" text-blue-600\";\n    } else if (player === 2) {\n      baseStyle += \" text-red-600\";\n    }\n    \n    if (player === 0 && gameStatus === 'playing') {\n      baseStyle += \" hover:bg-blue-50\";\n    } else if (player !== 0) {\n      baseStyle += \" cursor-not-allowed\";\n    }\n    \n    return baseStyle;\n  };\n\n  const getStatusMessage = () => {\n    if (!connected) return \"Connect your Phantom wallet to play\";\n    if (gameStatus === 'waiting') return \"Loading game...\";\n    if (gameStatus === 'won' && winner) return `üéâ ${getPlayerName(winner)} wins!`;\n    if (gameStatus === 'draw') return \"It's a draw! ü§ù\";\n    if (gameStatus === 'playing') return `Current turn: ${getPlayerName(currentPlayer)}`;\n    return \"\";\n  };\n\n  const getStatusColor = () => {\n    if (!connected) return \"text-gray-600\";\n    if (gameStatus === 'won') return \"text-green-600\";\n    if (gameStatus === 'draw') return \"text-yellow-600\";\n    if (currentPlayer === 1) return \"text-blue-600\";\n    return \"text-red-600\";\n  };\n\n  const copyGameUrl = () => {\n    navigator.clipboard.writeText(window.location.href);\n    // You could add a toast notification here\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-8\">\n      <div className=\"bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-800 mb-2\">\n            Tic Tac Toe\n          </h1>\n          <p className=\"text-gray-600 mb-4\">\n            On-chain gaming with Solana\n          </p>\n          \n          {/* Game ID Display */}\n          {gameId && (\n            <div className=\"mb-4 p-2 bg-gray-50 rounded-lg\">\n              <p className=\"text-xs text-gray-600 mb-1\">Game ID:</p>\n              <p className=\"text-sm font-mono text-gray-800 break-all\">{gameId}</p>\n              <button \n                onClick={copyGameUrl}\n                className=\"text-xs text-blue-600 hover:text-blue-800 mt-1\"\n              >\n                üìã Copy game URL\n              </button>\n            </div>\n          )}\n          \n          {/* Wallet Connection */}\n          <div className=\"mb-6\">\n            <WalletMultiButton className=\"!bg-purple-600 hover:!bg-purple-700\" />\n          </div>\n          \n          {/* Status */}\n          <div className={cn(\"text-lg font-semibold\", getStatusColor())}>\n            {getStatusMessage()}\n          </div>\n        </div>\n\n        {/* Game Board */}\n        {connected && (\n          <div className=\"mb-6\">\n            <div className=\"grid grid-cols-3 gap-2 mx-auto w-fit\">\n              {board.map((cell, index) => (\n                <button\n                  key={index}\n                  onClick={() => makeMove(index)}\n                  disabled={cell !== 0 || gameStatus !== 'playing' || isLoading}\n                  className={getCellStyle(cell, index)}\n                >\n                  {getPlayerSymbol(cell)}\n                </button>\n              ))}\n            </div>\n            \n            {/* Loading Indicator */}\n            {isLoading && (\n              <div className=\"flex items-center justify-center mt-4\">\n                <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-purple-600\"></div>\n                <span className=\"ml-2 text-gray-600\">Processing on blockchain...</span>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Game Controls */}\n        {connected && (gameStatus === 'won' || gameStatus === 'draw') && (\n          <div className=\"text-center\">\n            <button\n              onClick={resetGame}\n              className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors duration-200\"\n            >\n              New Game\n            </button>\n          </div>\n        )}\n\n        {/* Game Info */}\n        {connected && (\n          <div className=\"mt-6 text-center text-sm text-gray-500\">\n            <p>Game state is stored on Solana blockchain</p>\n            <p>Each move requires ONE transaction signature</p>\n            <p className=\"text-xs mt-1 text-gray-400\">\n              Share the URL to continue this game later!\n            </p>\n          </div>\n        )}\n      </div>\n      \n      {/* Instructions */}\n      <div className=\"mt-8 max-w-md text-center text-gray-600 text-sm\">\n        <h3 className=\"font-semibold mb-2\">How it works:</h3>\n        <ol className=\"list-decimal list-inside space-y-1\">\n          <li>Each game gets a unique ID stored in the URL</li>\n          <li>First move on a cell = <strong>Initialize</strong> + <strong>Set</strong> (1 signature)</li>\n          <li>Subsequent moves on other cells = <strong>Initialize</strong> + <strong>Set</strong> (1 signature)</li>\n          <li>Moves on initialized cells = <strong>Set</strong> only (1 signature)</li>\n          <li>Loading game = <strong>Get</strong> all positions (no signature)</li>\n        </ol>\n        \n        <div className=\"mt-4 p-3 bg-blue-50 rounded-lg text-xs\">\n          <h4 className=\"font-semibold text-blue-800 mb-1\">Smart Optimization:</h4>\n          <p className=\"text-blue-700\">\n            Each board position is initialized only once per game. \n            Subsequent moves only update the value, reducing transaction costs!\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n} "
      },
      "/home/project/src/hooks": {
        "type": "folder"
      },
      "/home/project/src/hooks/useTicTacToe.ts": {
        "type": "file",
        "content": "import { useState, useCallback, useEffect } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { PublicKey, SystemProgram } from '@solana/web3.js';\nimport { Program, AnchorProvider, web3, BN } from '@coral-xyz/anchor';\nimport { Buffer } from 'buffer';\nimport idl from '../solana/idl.json';\n\n// Make Buffer available globally for Solana libraries\nwindow.Buffer = Buffer;\n\n// Game state types\nexport type Player = 0 | 1 | 2; // 0 = empty, 1 = X, 2 = O\nexport type Board = Player[];\nexport type GameStatus = 'waiting' | 'playing' | 'won' | 'draw';\n\nconst PROGRAM_ID = new PublicKey(idl.address);\n\nexport function useTicTacToe() {\n  const { connection } = useConnection();\n  const wallet = useWallet();\n  const [board, setBoard] = useState<Board>(Array(9).fill(0));\n  const [currentPlayer, setCurrentPlayer] = useState<1 | 2>(1);\n  const [gameStatus, setGameStatus] = useState<GameStatus>('waiting');\n  const [isLoading, setIsLoading] = useState(false);\n  const [gameId, setGameId] = useState<string>('');\n\n  // Generate or get game ID from URL params\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    let id = urlParams.get('gameId');\n    \n    if (!id) {\n      // Generate random u64 as game ID\n      id = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString();\n      // Update URL without page reload\n      const newUrl = new URL(window.location.href);\n      newUrl.searchParams.set('gameId', id);\n      window.history.replaceState({}, '', newUrl.toString());\n    }\n    \n    setGameId(id);\n  }, []);\n\n  const getProvider = useCallback(() => {\n    if (!wallet.wallet || !wallet.publicKey) return null;\n    return new AnchorProvider(connection, wallet as any, {});\n  }, [connection, wallet]);\n\n  const getProgram = useCallback(() => {\n    const provider = getProvider();\n    if (!provider) return null;\n    return new Program(idl as any, provider);\n  }, [getProvider]);\n\n  // Get PDA for a specific board position using gameId as domain\n  const getPDA = useCallback((position: number) => {\n    if (!gameId) return null;\n    const [pda] = PublicKey.findProgramAddressSync(\n      [\n        new BN(gameId).toArrayLike(Buffer, 'le', 8),\n        new BN(position).toArrayLike(Buffer, 'le', 8)\n      ],\n      PROGRAM_ID\n    );\n    return pda;\n  }, [gameId]);\n\n  // Check if a position is already initialized\n  const isPositionInitialized = useCallback(async (position: number): Promise<boolean> => {\n    const program = getProgram();\n    const pda = getPDA(position);\n    if (!program || !pda || !gameId) return false;\n\n    try {\n      await program.methods\n        .get(new BN(gameId), new BN(position))\n        .accounts({\n          val: pda,\n        })\n        .view();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }, [getProgram, getPDA, gameId]);\n\n  // Initialize a board position (only when needed)\n  const initializePosition = useCallback(async (position: number) => {\n    const program = getProgram();\n    const pda = getPDA(position);\n    if (!program || !wallet.publicKey || !pda || !gameId) return false;\n\n    try {\n      await program.methods\n        .initialize(new BN(gameId), new BN(position))\n        .accounts({\n          val: pda,\n          signer: wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        })\n        .rpc();\n\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize position:', error);\n      return false;\n    }\n  }, [getProgram, getPDA, wallet.publicKey, gameId]);\n\n  // Set a value at a specific position\n  const setPosition = useCallback(async (position: number, player: 1 | 2) => {\n    const program = getProgram();\n    const pda = getPDA(position);\n    if (!program || !wallet.publicKey || !pda || !gameId) return false;\n\n    try {\n      await program.methods\n        .set(new BN(gameId), new BN(position), new BN(player))\n        .accounts({\n          val: pda,\n        })\n        .rpc();\n\n      return true;\n    } catch (error) {\n      console.error('Failed to set position:', error);\n      return false;\n    }\n  }, [getProgram, getPDA, wallet.publicKey, gameId]);\n\n  // Get value at a specific position\n  const getPosition = useCallback(async (position: number): Promise<Player> => {\n    const program = getProgram();\n    const pda = getPDA(position);\n    if (!program || !pda || !gameId) return 0;\n\n    try {\n      const result = await program.methods\n        .get(new BN(gameId), new BN(position))\n        .accounts({\n          val: pda,\n        })\n        .view();\n\n      return result.toNumber() as Player;\n    } catch (error) {\n      // Position not initialized yet, return 0 (empty)\n      return 0;\n    }\n  }, [getProgram, getPDA, gameId]);\n\n  // Load the current board state from blockchain\n  const loadBoard = useCallback(async () => {\n    if (!gameId) return;\n    \n    setIsLoading(true);\n    try {\n      const newBoard: Board = [];\n      for (let i = 0; i < 9; i++) {\n        const value = await getPosition(i);\n        newBoard[i] = value;\n      }\n      setBoard(newBoard);\n      \n      // Check game status\n      const winner = checkWinner(newBoard);\n      if (winner) {\n        setGameStatus('won');\n      } else if (newBoard.every(cell => cell !== 0)) {\n        setGameStatus('draw');\n      } else {\n        setGameStatus('playing');\n      }\n    } catch (error) {\n      console.error('Failed to load board:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [getPosition, gameId]);\n\n  // Make a move - FIXED to avoid double wallet prompts\n  const makeMove = useCallback(async (position: number) => {\n    if (board[position] !== 0 || gameStatus !== 'playing' || isLoading || !gameId) return;\n\n    setIsLoading(true);\n    try {\n      // Check if position is already initialized\n      const initialized = await isPositionInitialized(position);\n      \n      if (!initialized) {\n        // Initialize position first (only once per position)\n        const initSuccess = await initializePosition(position);\n        if (!initSuccess) {\n          console.error('Failed to initialize position');\n          return;\n        }\n      }\n      \n      // Set the value (this happens every move)\n      const success = await setPosition(position, currentPlayer);\n      \n      if (success) {\n        // Update local state immediately for better UX\n        const newBoard = [...board];\n        newBoard[position] = currentPlayer;\n        setBoard(newBoard);\n        \n        // Check for winner\n        const winner = checkWinner(newBoard);\n        if (winner) {\n          setGameStatus('won');\n        } else if (newBoard.every(cell => cell !== 0)) {\n          setGameStatus('draw');\n        } else {\n          setCurrentPlayer(currentPlayer === 1 ? 2 : 1);\n        }\n        \n        // Reload from blockchain to ensure consistency\n        setTimeout(() => loadBoard(), 1000);\n      }\n    } catch (error) {\n      console.error('Failed to make move:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [board, currentPlayer, gameStatus, isLoading, gameId, isPositionInitialized, initializePosition, setPosition, loadBoard]);\n\n  // Check for winner\n  const checkWinner = (board: Board): Player => {\n    const lines = [\n      [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows\n      [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns\n      [0, 4, 8], [2, 4, 6] // diagonals\n    ];\n\n    for (const [a, b, c] of lines) {\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n        return board[a];\n      }\n    }\n    return 0;\n  };\n\n  // Reset game - creates new game ID\n  const resetGame = useCallback(() => {\n    const newGameId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString();\n    \n    // Update URL with new game ID\n    const newUrl = new URL(window.location.href);\n    newUrl.searchParams.set('gameId', newGameId);\n    window.history.replaceState({}, '', newUrl.toString());\n    \n    setGameId(newGameId);\n    setBoard(Array(9).fill(0));\n    setCurrentPlayer(1);\n    setGameStatus('waiting');\n  }, []);\n\n  // Start new game\n  const startGame = useCallback(async () => {\n    if (!wallet.connected || !gameId) return;\n    setGameStatus('playing');\n    await loadBoard();\n  }, [wallet.connected, loadBoard, gameId]);\n\n  // Effect to start game when wallet connects or gameId changes\n  useEffect(() => {\n    if (wallet.connected && gameId && gameStatus === 'waiting') {\n      startGame();\n    }\n  }, [wallet.connected, gameId, gameStatus, startGame]);\n\n  return {\n    board,\n    currentPlayer,\n    gameStatus,\n    isLoading,\n    makeMove,\n    resetGame,\n    startGame,\n    loadBoard,\n    isConnected: wallet.connected,\n    winner: gameStatus === 'won' ? checkWinner(board) : null,\n    gameId\n  };\n} "
      },
      "/home/project/src/index.css": {
        "type": "file",
        "content": "@import \"tailwindcss\";\n/* @import \"tw-animate-css\"; */\n"
      },
      "/home/project/src/main.tsx": {
        "type": "file",
        "content": "import { Buffer } from 'buffer';\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { SolanaProvider } from './components/SolanaProvider';\n\n// Make Buffer available globally\nglobalThis.Buffer = Buffer;\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <SolanaProvider>\n      <App />\n    </SolanaProvider>\n  </StrictMode>,\n);\n"
      },
      "/home/project/src/solana": {
        "type": "folder"
      },
      "/home/project/src/solana/idl.json": {
        "type": "file",
        "content": "{\n  \"address\": \"6ytMmvJR2YYsuPR7FSQUQnb7UGi1rf36BrXzZUNvKsnj\",\n  \"metadata\": {\n    \"name\": \"mappings\",\n    \"version\": \"0.1.0\",\n    \"spec\": \"0.1.0\",\n    \"description\": \"Created with Anchor\"\n  },\n  \"instructions\": [\n    {\n      \"name\": \"get\",\n      \"discriminator\": [161, 224, 50, 61, 5, 210, 122, 216],\n      \"accounts\": [\n        {\n          \"name\": \"val\"\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"domain\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"key\",\n          \"type\": \"u64\"\n        }\n      ],\n      \"returns\": \"u64\"\n    },\n    {\n      \"name\": \"initialize\",\n      \"discriminator\": [175, 175, 109, 31, 13, 152, 155, 237],\n      \"accounts\": [\n        {\n          \"name\": \"val\",\n          \"writable\": true,\n          \"pda\": {\n            \"seeds\": [\n              {\n                \"kind\": \"arg\",\n                \"path\": \"domain\"\n              },\n              {\n                \"kind\": \"arg\",\n                \"path\": \"key\"\n              }\n            ]\n          }\n        },\n        {\n          \"name\": \"signer\",\n          \"writable\": true,\n          \"signer\": true\n        },\n        {\n          \"name\": \"system_program\",\n          \"address\": \"11111111111111111111111111111111\"\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"domain\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"key\",\n          \"type\": \"u64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"set\",\n      \"discriminator\": [198, 51, 53, 241, 116, 29, 126, 194],\n      \"accounts\": [\n        {\n          \"name\": \"val\",\n          \"writable\": true\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"domain\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"key\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"value\",\n          \"type\": \"u64\"\n        }\n      ]\n    }\n  ],\n  \"accounts\": [\n    {\n      \"name\": \"Val\",\n      \"discriminator\": [117, 195, 162, 127, 63, 84, 168, 122]\n    }\n  ],\n  \"types\": [\n    {\n      \"name\": \"Val\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"value\",\n            \"type\": \"u64\"\n          }\n        ]\n      }\n    }\n  ]\n}\n"
      },
      "/home/project/src/utils": {
        "type": "folder"
      },
      "/home/project/src/utils/utils.ts": {
        "type": "file",
        "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"
      },
      "/home/project/src/vite-env.d.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\n"
      },
      "/home/project/tsconfig.app.json": {
        "type": "file",
        "content": "{\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.app.tsbuildinfo\",\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"verbatimModuleSyntax\": false,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n    \"erasableSyntaxOnly\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedSideEffectImports\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"src\"]\n}\n"
      },
      "/home/project/tsconfig.json": {
        "type": "file",
        "content": "{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.app.json\" },\n    { \"path\": \"./tsconfig.node.json\" }\n  ],\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  }\n}\n"
      },
      "/home/project/tsconfig.node.json": {
        "type": "file",
        "content": "{\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.node.tsbuildinfo\",\n    \"target\": \"ES2022\",\n    \"lib\": [\"ES2023\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"verbatimModuleSyntax\": false,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"erasableSyntaxOnly\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedSideEffectImports\": true,\n  },\n  \"include\": [\"vite.config.ts\"]\n}\n"
      },
      "/home/project/vite.config.ts": {
        "type": "file",
        "content": "/// <reference types=\"vite/client\" />\n\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport tailwindcss from '@tailwindcss/vite'\nimport { fileURLToPath } from 'node:url';\n\nconst __dirname = fileURLToPath(new URL('.', import.meta.url));\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react(), tailwindcss()],\n  define: {\n    global: 'globalThis',\n  },\n  resolve: {\n    alias: {\n      \"@\": __dirname,\n      buffer: 'buffer',\n    },\n  },\n  optimizeDeps: {\n    include: ['buffer'],\n  },\n})\n"
      }
    }
  }
}